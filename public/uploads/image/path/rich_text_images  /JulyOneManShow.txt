===========================================
Delete from p_f_C and f_c based on category_name
-------------------------------------------------

  @db = "mysql -u root -pSector@123 prod1 -e "
#  Dir.glob("/home/think/data/Part_2/2013jun19/*").select {|f| File.file? f}
  ["mobiles_lists"].each do |f|
       scat = File.basename(f)
       cat = scat.gsub(/_lists/,"")
       ca = cat.chop
       
       sc = Subcategories.find_by_sub_category_name(scat)
       
       ["products_filter_collections","filters_collections"].each do |x|
       sql_del = "DELETE FROM #{x} WHERE sub_category_id = #{sc.id}"
       p "======EXECUTING SQL============================="
       stmt1 =  @db + '"' + sql_del + '"'
       p stmt1
       
       system(stmt1)
       p "================================================" 
       end
  end

===========================================
Update the mobiles_lists table with the mobile_color having all the colors of a mobile_name comma separated but the a duplicate row will be present
-------------------------------------------------------------------------------------------



UPDATE mobiles_lists t
         JOIN
           ( SELECT GROUP_CONCAT(mobile_color) as c,mobile_name
             FROM mobiles_lists
             GROUP BY mobile_name
           ) AS tu
         ON tu.mobile_name = t.mobile_name
SET t.mobile_color = tu.c;

/*-------------------------------------------------------------------------------------------
Delete duplicate rows based on mobile_name
-------------------------------------------------------------------------------------------*/

DELETE t1
  FROM mobiles_lists as t1
  join mobiles_lists as t2
 WHERE t1.mobile_name = t2.mobile_name
   and t1.mobiles_list_id < t2.mobiles_list_id;
   
   
ALTER TABLE mobiles_lists ADD CONSTRAINT u_name UNIQUE (mobile_name);

-------------------------------------------------------------------------------------------
Delete stuffs from index tables
-------------------------------------------------------------------------------------------

["mobiles_f10_secondary_cameras","mobiles_f11_processors",
"mobiles_f12_messagings","mobiles_f13_browsers","mobiles_f14_mobile_rams",
"mobiles_f15_assorteds","mobiles_f1_mobile_brands",
"mobiles_f2_mobile_colors","mobiles_f3_mobile_types",
"mobiles_f4_mobile_designs",
"mobiles_f5_os_versions","mobiles_f6_touch_screens",
"mobiles_f7_internal_storages","mobiles_f8_card_slots",
"mobiles_f9_primary_cameras"].each do |i|
  i.camelize.constantize.delete_all
end
   
/*-------------------------------------------------------------------------------------------
Delete unique index on mobiles_lists table
-------------------------------------------------------------------------------------------*/

ALTER TABLE mobiles_lists DROP INDEX name_id;
===========================================

To know what shop sells what category_names
-------------------------------------------


SELECT GROUP_CONCAT(distinct(s.sub_category_name)) AS sname,
  v.vendor_name vname
  FROM vendors_lists v
  JOIN link_products_lists_vendors l on v.vendor_id = l.vendor_id
  JOIN subcategories s on l.sub_category_id = s.sub_category_id
  GROUP BY v.vendor_name
 
===========================================

To get the table count of products in the db
--------------------------------------------




===========================================
To delete a line from a target file that matched a line from a source file
----------------------------------------------------------------------------
1. Remove suspects from a final file => keep final
---------------------------------------------------

@arr = File.open("/home/think/data/Part_1/miniConfusion/master_input").map{|i| i.chomp}
Dir.glob("/home/think/test/miniPlace/*").select {|f| File.file? f}.each do |f|
    File.open(f).each do |j|
       @line = j
       f1 = j.split("|")[1]
       if !@arr.include?(f1)
         @out_name = File.basename(f)
         p @out_name
         File.open("/home/think/data/Part_1/Several/2013jul05/mobiles_lists/#{@out_name}","a+"){|f| f.write(@line) }
       else
         #p j
       end
    end
end

2. Match filter1_out and take only suspect matched line's clean name and url and do nmap
---------------------------------------------------------------------------------------

@arr = File.open("/home/think/data/Part_1/miniConfusion/master_input").map{|i| i.chomp}
Dir.glob("/home/think/test/miniPlace/*").select {|f| File.file? f}.each do |f|
    @out_name = File.basename(f)
    p @out_name
    File.open(f).each do |j|
       cols = j.split("|")
       f1 = cols[1]
       @line = "|#{cols[5]}|#{cols[12]}\n"
       if @arr.include?(f1)
         p @line
         File.open("/home/think/data/Part_1/Several/2013jul05/mobiles_lists/2/#{@out_name}","a+"){|f| f.write(@line) }
       else
         p j
       end
    end
end
===========================================

delete from brands where name="na";
===========================================


@arr = File.open("/home/think/test/2013jul08/master_input").map{|i| i.chomp}
Dir.glob("/home/think/test/2013jul08/mobiles_lists").select {|f| File.file? f}.each do |f|
    @out_name = File.basename(f)
    p @out_name
    File.open(f).each do |j|
       cols = j.split("|")
       f1 = cols[1]       
       if @arr.include?(f1)
         File.open("/home/think/test/2013jul08/#{@out_name + "_out"}","a+"){|f| f.write(j) }
       else
         p j
       end
    end
end

===========================================
scp  /home/think/data/populars/2013jul08/populars U4f95KQ5B@180.179.50.152:/var/www/data/populars

===========================================
Connect to a remote mysql database
----------------------------------

ActiveRecord::Base.establish_connection(
           :adapter  => "mysql2",
           :database => "crawlfishdevdb",
           :host     => "180.179.50.152",
           :port     => 3306,
           :username => "root",
           :password => "Sector@123"
         ).connection()

===========================================


