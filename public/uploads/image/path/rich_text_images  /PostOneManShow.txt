#=================
#Given a list of url, it will scrap and save images
#---------------------------------------------------
FileUtils.cd("/home/think/test")

File.open("url","r").each do |line|

    arr = line.split("|")
    url = arr[1]
    brand = arr[2]
    name= arr[3]
    id1= arr[4]
    name2 =arr[5]
    temp = name2.split("_")
    temp.delete(temp.last)
    temp1 = temp.join("_")
    fold = temp.join("-").capitalize + "-Images" 
    
    c1 = ["mobile","printer"]
    c2 = ["laptop","desktop"]
    c3 = ["external_hdd"]
    c4 = ["router"]
    c5 = ["mouse","keyboard"]
    c6 = ["speaker", "memory_card" , "pendrive" , "headphone" , "headset" , "tablet"]

    case temp1

    when *c1
      title = name.gsub(/ /,"-")      
    when *c2
      title = name.gsub(/ /,"-") + "-" + id1
    when *c3
      title = name.gsub(/ /,"-") + "-" + id1.gsub(/ /,"-").gsub(/,/,"-").gsub(/_/,"-")
    when *c4
      title = brand + "-" + temp.capitalize + "-" + id1
    when *c5
      title = brand + "-" + 'Mice' + "-" + id1.gsub(/\//,"-")
    when *c6
      title = id1
    end
    
    begin
        agent = Mechanize.new
        page = agent.get(url)
        images = page.search("div#mprodimg-id > img")

        if images.blank?
          images = page.search("span#main-image-id//img")
        end
        p "==================="
        p url
        p images.blank?
        p "==================="
        attr = images.first.attributes["data-src"]
        
        FileUtils.cd("/home/think/test/images")
        folder = fold + "/" + brand
        if !File.directory?(folder)
            FileUtils.mkdir_p(folder)
        end
        agent.get(attr).save "/home/think/test/images/#{folder}/#{title + ".jpg"}"

    
    rescue Mechanize::ResponseCodeError
        p "==================="
        p name
        p "Not found"
        p "==================="
    end
end
#=================

#=================
#Takes all image url and searches for images that are not present and creates unavl image
#----------------------------------------------------------------------------------------

unavl = "/home/think/CrawlFish/public/Images/unavl.jpg"
path = "/home/think/CrawlFish/public"

Subcategories.all.each do |s|
      url = s.url
      n = s.name
      s.sub_category_name.camelize.constantize.all.each do |p|
      
           img = p.send(url).split(",")
           img.each do |image|   
           full = path+image.gsub(/ /,"-")

                 if !File.exists?(full)
                   FileUtils.cp(unavl,full)
                   p image
                 end
           end      
      end
end

    
#=================

#=================
#updates all avl_flag to 1
#----------------------------------------------------------------------------------------

Subcategories.all.each do |i|
    if i.sub_category_id != 2 
        a = i.sub_category_name
        b = i.avl_flag

        p "Update #{a} set #{b} = 'y'" + ";"
    end
end

Update laptops_lists set laptop_availability_flag = 'y';
Update desktops_lists set desktop_availability_flag = 'y';
Update external_hdds_lists set external_hdd_availability_flag = 'y';
Update printers_lists set printer_availability_flag = 'y';
Update routers_lists set router_availability_flag = 'y';
Update mouses_lists set mouse_availability_flag = 'y';
Update keyboards_lists set keyboard_availability_flag = 'y';
Update speakers_lists set speaker_availability_flag = 'y';
Update memory_cards_lists set memory_card_availability_flag = 'y';
Update pendrives_lists set pendrive_availability_flag = 'y';
Update headphones_lists set headphone_availability_flag = 'y';
Update headsets_lists set headset_availability_flag = 'y';
Update tablets_lists set tablet_availability_flag = 'y';
    
#=================
When scp fails transfer, try this
---------------------------------
rsync --partial --progress --rsh=ssh U4f95KQ5B@180.179.50.152:/var/www/data/mysql_dump/2013may30dump.sql .
#=================
To find the mismatch of part-1 and part-2 files, name and color
---------------------------------------------------------------
File.open("/home/think/data/Part_1/2013may30Mobiles/Online_Homeshop18_Products",'r') do |infile|
      
            while (line = infile.gets)
                arr = line.split("|")
            
                p1 = arr[1]
                p1c = arr[6]                
                p2 = MobilesLists.where(:mobile_name => p1,:mobile_color => p1c).first
                
                if !p2.nil?                
                    p "Success!"
                else
                  p "===== START ==================="
                  p "Part - 1 : ####### #{p1} ===== "
                  p "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxp2 was nil, examine why?"
                  p "===== END ==================="
                
                end

            end
end
#=================
When sub_category_id cannot be null error is thrown, the following might solve it sometimes
-------------------------------------------------------------------------------------------
insert into subcategories(sub_category_name,category_name,sub_category_id) values("books_lists","books",1);
#=================

@s = 0
@e = 0
Dir.glob('/home/think/data/Part_1/2013may31Mobiles/*').select {|f| File.file? f}.each do |file_name|
    File.open(file_name,'r') do |infile|
          
                while (line = infile.gets)
                
                   f = File.basename(file_name)
                   log_path = File.dirname(file_name)+"/log/" + f + "_err"
                
                
                    line.encode!('UTF-8', 'UTF-8', :invalid => :replace)
                    arr = line.split("|")
                
                    p1 = arr[1]
                    p1c = arr[6]
                    cat_name = arr[4]
                    cat = Subcategories.where(:sub_category_name => cat_name).first
                    if !cat.blank?
                    
                        p2 = cat_name.camelize.constantize.where(cat.name.to_sym => p1,cat.id1.to_sym => p1c).first
                        
                        if !p2.nil?                
                            p "Success!"
                            @s += 1
                        else
                          @e += 1
                          p "===== START ==================="
                          p "Part - 1 : ####### #{p1} ===== "
                          p "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxp2 was nil, examine why?"
                          p "===== END ==================="
                          
                          File.open(log_path, 'a+') {|f| f.write(line) }
                          
                        end
                     else
                        @e += 1
                        p "===== START ==================="
                        p "Your sub_category_name is wrong.. It was #{cat_name}, check it"
                        p "===== END ==================="
                        
                        File.open(log_path, 'a+') {|f| f.write(line) }
                     end

                end
    end
end

p "Number of success : #{@s}"
p "Number of error : #{@e}"

["online_buytheprice_products",
"online_croma_products",
"online_crossword_products",
"online_edabba_products",
"online_flipkart_products",
"online_futurebazaar_products",
"online_greendust_products",
"online_homeshop18_products",
"online_indiaplaza_products",
"online_infibeam_products",
"online_landmark_products",
"online_maniacstore_products",
"online_merchant_products",
"online_mirchimart_products",
"online_poorvika_products",
"online_saholic_products",
"online_sangeetha_products",
"online_snapdeal_products",
"online_themobilestore_products",
"online_univercell_products",
"online_uread_products"].each do |i|
    
    i.camelize.constantize.delete_all
end
#=================
To take out the priority_errors from that table
-------------------------------------------------

mysql -u root -pSector@123 prod1  -e 'select concat(product_name,",",identifier1,",", identifier2,",",message) from priority_errors' > priority_errors

#=================

bundle exec rake assets:clean RAILS_ENV=production

bundle exec rake assets:precompile RAILS_ENV=production

apache2ctl -k restart



#=================
Find files modified before half day, change 0.5 to 1 for 1 day
----------------------------------------------------------------
cd /tmp
rm -rf changed.tgz
cd /home/think/CrawlFish
find . -mtime -1.7 | xargs tar --no-recursion -czf /tmp/changed.tgz
tar xvzf changed.tgz
#=================
Data
------
update vendors_lists set vendor_alias_name = "Sony Center" where vendor_alias_name = "Sony Center, Kwality Shop";

update vendors_lists set vendor_name = "SonyCenter" where vendor_alias_name = "Sony Center";

 update vendors_lists set top = 0 where admin = 0;
 
  update branches set hub='y' where branch_id IN (1,15,14,2,36,32,92,18,16,39,20,22,8,38,27,12,7,33,21,28);
  
  update branches set branch_name=replace(branch_name,"-","");
  
  update branches set branch_name=replace(branch_name," ","");
  
  update mouses_lists set mouse_image_url=replace(mouse_image_url," ","-");
  
  UPDATE vendors_lists SET
ADMIN= (Select branch_id from branches where branch_name = "Purasawakkam"),
CAT_BRAN="{'mobiles_lists'=>'samsung,nokia,micromax,sony,htc,blackberry'}",
PREMIUM=1, 
AUTHORISED=0, 
CARDS=1, 
AFFILIATE=1,
ENQUIRY_NO=" 9094047408",
TOP=1,
LANDMARK="Opposite to Abiraami mall",
OWNER="John Jesudas",
POC= "Jasohan"
WHERE vendor_id = 113; 

update vendors_lists set admin = 27  where vendor_name="fonecity";

 update vendors_lists set vendor_name="SamsungSmartCafe", vendor_alias_name ="Samsung Smart Cafe" where vendor_name="SamsungSmartphoneCafe";
 update vendors_lists set vendor_name="SamsungSmartCafe", vendor_alias_name ="Samsung Smart Cafe" where vendor_name="SamsungSPhoneCafe";
 update vendors_lists set vendor_name="SamsungSmartCafe", vendor_alias_name ="Samsung Smart Cafe" where vendor_name="SamsungSmartphone";


To update the admin value for all the branches of vendor
---------------------------------------------------------
UPDATE vendors_lists a
INNER JOIN vendors_lists b ON
   a.vendor_name = b.vendor_name
SET a.admin = b.admin;

#=================
Efforts - Retail Cat_bran updater
----------------------------------

VendorsList.where(:business_type => "local").each do |v|
    if !v.cat_bran.nil?
        #{'a' => 'x,y,z'}
        cb = eval(v.cat_bran)
        cb.keys.each do |c|
          # activerecord
          sc = Subcategories.where(:sub_category_name => c)
          # [x,y,z]
          bran = cb[c].split(",")
          bran.each do |b|
              # MobilesLists
              c.camelize.constantize.where(sc.brand.to_sym => b).select(sc.id_name)
              LinkProductsListsVendors.create(:vendor_id => v.vendor_id,:prod
          end

        end
    end
end

INSERT INTO table_listnames (name, address, tele)
SELECT * FROM (SELECT 'Rupert', 'Somewhere', '022') AS tmp
WHERE NOT EXISTS (
    SELECT name FROM table_listnames WHERE name = 'Rupert'
) LIMIT 1;
#=================
N-mapper -core
--------------
Dir.glob('/home/think/data/Part_1/2013jun08Laptops/*').select {|f| File.file? f}.each do |f|

    File.open(f).each do |i|
        arr = i.split("|")
        url = arr.last
        temp = arr - [url]
        name = temp.join(" ")
        p name
        
        agent = Mechanize.new
            begin
                page = agent.get(url)
                    if !(page.at("input.out-of-stock").nil?)
                        @p = "out of stock"
                    else
                        @p = "in stock"
                    end
            rescue  Mechanize::ResponseCodeError
                @p ="Bad url" + "===" + url
            end 
        p url
        ok = name.strip
        ans = (ProductsFilterCollections.search ok,:match_mode => :any)
        if !ans.blank?
          p2 = ans.first.laptop_name
          out = "\n=====================\n#{ok}=== #{@p}\n#{p2}\n=====================\n"
          File.open(f + "_out", 'a+') {|f| f.write(out) }          
        end

    end


end
--------------
w/o availability
--------------
Dir.glob('/home/think/data/Part_1/2013jun11Routers/*').select {|f| File.file? f}.each do |f|

    File.open(f).each do |i|
        arr = i.split("|")        
        @p1 = arr[1]
        
        @ans = (ProductsFilterCollections.search @p1,:match_mode => :any)
        if !@ans.blank?
          @p2 = @ans.first.filter_key
          @out = "\n=====================\n#{@p1}=== \n#{@p2}\n=====================\n"
          File.open(f + "_out", 'a+') {|f| f.write(@out) }          
        end

    end


end
#=================
Scrap images from part2 file delivered by Mothi and this has to be run by script from Dhami
--------------------------------------------------------------------------------------------

Dir.glob("/home/think/img/2013jun11/*").select {|f| File.file? f}.each do |x|

   base = File.basename(x)
   dir = base.titleize.gsub(/ /,"-") + "-Images"
   
   dest = File.dirname(x)
   FileUtils.cd(dest)
   
   p "This is dir...#{dir}/n"
   p "This is dest...#{dest}/n"
   
   
   if !File.directory?(dir)
       FileUtils.mkdir_p(dir)
   end
   FileUtils.cd(dir)
   
   File.open(x).each do |i|
       i.encode!('UTF-8', 'UTF-8', :invalid => :replace)
       bran = i.split("|")[4].downcase.gsub(/ /,"").titleize
       img_url = i.split("|")[3]
       name = i.split("|")[1].titleize.gsub(/ /,"-")
       
       if !File.directory?(bran)
        FileUtils.mkdir_p(bran)
       end
       FileUtils.cd(bran)
       
       if img_url.downcase != "n.a."
          agent = Mechanize.new
          agent.get(img_url).save dest + "/" + dir + "/" + bran + "/" + name + ".jpg"
          FileUtils.cd("..")
       end
   end
   
end

#=================
Only uniq lines, remove duplicate lines, fixes incomplete last lines and remove orig file and replaces file name to _lists from _dis_uniq
------------------------------------------------------------------------------------------
for i in * ;do [ -s $i ] && [ -n "`tail -1c $i`" ] && echo >> $i;sort $i | uniq  > "$i"_uniq;rm $i; done
#=================
Replace part no from N.A. to na
-------------------------------
Dir.glob("/home/think/data/Part_2/2013jun12/*").select {|f| File.file? f}.each do |x|
  File.open(x).each do |i|
  
    arr = i.split("|")
    p = arr[2]
    if p.downcase == "n.a."
      arr[2] = "na"
    end
    line = arr.join("|")
    File.open(x + "_out", 'a+') {|f| f.write(line) }
  
  end

end
#=================
Convert all images to cut sizes 50, 120, 200
---------------------------------------------
for i in *-Images ; do /home/think/CrawlFish/script/img_man/converter.sh $i 50x50 120x120 200x200; done
#=================
List all files under one directory recursively
----------------------------------------------
find . -type f | wc -l
#=================
Sync all files and directories
------------------------------
rsync -dr /home/think/data/Part_2/2013jun12/Desktop-Images /home/think/CrawlFish2013jun01/CrawlFish/public/Images/
#=================
To check the number of images in the xxxx-Images format directories
------------------------------------------------------------------
for i in `ls -d *-Images`; do echo $i;find $i -type f | wc -l; done
#=================
To sync the new part-2 images directory with the app images directory,(note the last character "/" is removed by using ${i%?}, this is when the sync takes place in the desired place
-----------------------------------------------------------------------------------------------------
for i in `ls -d */` ; do rsync -dr /home/think/data/Part_2/2013jun12/${i%?} /home/think/CrawlFish2013jun01/CrawlFish/public/Images/; done
#=================
#Sony vaio case
#---------------
LaptopsLists.where("laptop_name like '%sony vaio%'").each do |i|

  if i.laptop_part_no.length == 10 || 12
    p i.laptop_part_no
    pre = i.laptop_part_no.split("-")[0]
    first = pre[0..2]
    last = pre[3..7]
    final = i.laptop_part_no + "-" +  first + " " + last
    i.update_attribute(:laptop_part_no,final)
  end

end

#Lenovo case
#---------------
LaptopsLists.where("laptop_brand like '%lenovo%'").each do |i|

    final = i.laptop_part_no + "-" +  i.laptop_part_no.gsub(/-/,"")
    i.update_attribute(:laptop_part_no,final)
    
end


#Dell case
#---------------
LaptopsLists.where("laptop_brand like '%dell%'").each do |i|

    final = "notvalid" + i.laptops_list_id.to_s
    i.update_attribute(:laptop_part_no,final)
    
end

#THE  gb/tb/case
#------------------------

def ok(obj,ptn,b)
  final = obj.send(ptn) + "-" +  b[0].gsub(/ /,"")
  p final
  obj.update_attribute(ptn.to_sym,final)
end

["external_hdds_lists","mobiles_lists","memory_cards_lists","tablets_lists","pendrives_lists"].each do |s|
  scat = Subcategories.find_by_sub_category_name(s)
  name = scat.name
  id1 = scat.id1
  s.camelize.constantize.all.each do |i|
  n = i.send(name).downcase 
  
  gb = n.scan(/[0-9]+gb/)
  tb = n.scan(/[0-9]+tb/)
  
  gb_spc = n.scan(/[0-9]+ gb/)
  tb_spc = n.scan(/[0-9]+ tb/)
  
    case
    when !gb.blank?
       ok(i,id1,gb)
    when !tb.blank?
       ok(i,id1,tb)
    when !gb_spc.blank?
       ok(i,id1,gb_spc)
    when !tb_spc.blank?
       ok(i,id1,tb_spc)
    else
       p "No gb or tb, w or w/o space encountered .."
    end
end
end


#p-mapper changes
-----------------
mysql> ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_b;
Query OK, 37237 rows affected (2.08 sec)
Records: 37237  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_ba;
Query OK, 37237 rows affected (2.60 sec)
Records: 37237  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_ma;
Query OK, 37237 rows affected (2.90 sec)
Records: 37237  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_m;
Query OK, 37237 rows affected (3.61 sec)
Records: 37237  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_v;
Query OK, 37237 rows affected (2.00 sec)
Records: 37237  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors DROP INDEX vendor_id;
Query OK, 0 rows affected (0.26 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE link_products_lists_vendors ADD CONSTRAINT u_v_pl_s_p_id UNIQUE (vendor_id,products_list_id,sub_category_id,pid);

Or 
ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_b;
ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_ba;
ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_ma;
ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_m;
ALTER TABLE link_products_lists_vendors DROP FOREIGN KEY fk_link_products_lists_vendors_v;
ALTER TABLE link_products_lists_vendors DROP INDEX vendor_id;
ALTER TABLE link_products_lists_vendors ADD CONSTRAINT u_v_pl_s_p_id UNIQUE (vendor_id,products_list_id,sub_category_id,pid);

Manual work final on part-2
----------------------------
select laptop_name from laptops_lists where length(laptop_name) > 43;

#=================
Cut and rev and append
-----------------------
rev  Laptops_Edabba_raw |cut -d"|" -f3-|rev |sed -e 's/$/|laptops_lists/g' > temp
#=================
for i in *; do sed -e 's/$/|laptops_lists/g' $i > $i"1";done
#=================
rvm all do gem install watir-webdriver
#=================

https://groups.google.com/forum/?fromgroups#!topic/watir-general/l73OV9qGDmU

http://watirwebdriver.com/web-elements/

http://rubydoc.info/gems/watir/1.6.7/Watir/ElementCollections

http://wiki.openqa.org/display/WTR/Cheat+Sheet

#=================
Split based on & and take 0th element
--------------------------------------
Dir.glob("/home/think/data/Part_2/2013jun14Laptops/laptops_url_uniq").select {|f| File.file? f}.each do |x|
  File.open(x).each do |i|
  
    url = i.split("&")[0] + "\n"

    File.open(x + "_out", 'a+') {|f| f.write(url) }
  
  end

end
#=================
Delete where its laptops_lists from part 1 tables anbd l p l v table
--------------------------------------
Dir.glob('/home/think/data/Part_1/Laptops/2013jun14Laptops/*').select {|f| File.file? f}.each do |i|
    i = File.basename(i)
    p "DELETE FROM #{i} WHERE product_sub_category = 'laptops_lists';"
end

Delete from link_products_lists_vendors where sub_category_id = 16 AND vendor_id IN (Select vendor_id from vendors_lists  where business_type = "online");  # laptops
#=================
Script for errorenous part names
--------------------------------

PriorityErrors.limit(1000).offset(142).each do |j|
    url = OnlineSnapdealProducts.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/online_snapdeal_products", 'a+') {|f| f.write(@out) }
end


PriorityErrors.limit(7).offset(135).each do |j|
    url = OnlineMirchimartProducts.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/online_mirchimart_products", 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(13).offset(121).each do |j|
    cat ="online_gadgetsguru_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(18).offset(104).each do |j|
    cat ="online_tradus_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(11).offset(92).each do |j|
    cat ="online_indiatimes_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(3).offset(89).each do |j|
    cat ="online_saholic_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(21).offset(68).each do |j|
    cat ="online_shopclues_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(7).offset(60).each do |j|
    cat ="online_homeshop18_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end

PriorityErrors.limit(53).offset(7).each do |j|
    cat ="online_edabba_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end


PriorityErrors.limit(7).offset(0).each do |j|
    cat ="online_nikishop_products"
    
    url = cat.camelize.constantize.where(:product_name =>  j.product_name).first.product_redirect_url
    @out = "|" + j.product_name + "|" + url + "\n"
    File.open("/home/think/test/jun17/" + cat, 'a+') {|f| f.write(@out) }
end
#=================
Load anything by using the following migration, CHANGE THE PATH
----------------------------------------------------------------
mysql -u root -pSector@123 crawlfishdevdb -e 'delete from schema_migrations where version=20130525195837'
rake db:migrate:up VERSION=20130525195837 PATH="/home/think/data/Part_1/2013jun18Laptops"
#=================
mysql time diff utilities
-------------------------
        /*
         SELECT now() INTO @start;
         SELECT now() INTO @end;
        SELECT abs(timediff(@end,@start)) INTO @diff;
        SELECT CONCAT('There are ',@v_c,' records to process ..');
     SELECT CONCAT('Per record takes ',@diff,' seconds to process ..');
     SET @take = @diff * @v_c;
     SELECT CONCAT('It willapproximately take ',@take,' seconds to process ',@v_c, ' records. Best thing is to go have a coffee and come back after ',@take);
        
        */
#=================
DELETE from p_f_c and f_c tables based on cat
----------------------------------------------------------------
        @db = "mysql -u root -pSector@123 prod1 -e "
  Dir.glob("/home/think/data/Part_2/2013jun19/*").select {|f| File.file? f}
  ["laptops_lists"].each do |f|
       scat = File.basename(f)
       cat = scat.gsub(/_lists/,"")
       ca = cat.chop
       
       sc = Subcategories.find_by_sub_category_name(scat)
       
       ["products_filter_collections","filters_collections"].each do |x|
       sql_del = "DELETE FROM #{x} WHERE sub_category_id = #{sc.id}"
       p "======EXECUTING SQL============================="
       stmt1 =  @db + '"' + sql_del + '"'
       p stmt1
       
       system(stmt1)
       p "================================================" 
       end
  end
#=================    
DELETE on identifier1 unique and add name + identifier1 unique
-------------------------------------------------------------

  @db = "mysql -u root -pSector@123 crawlfishdevdb -e "
  Subcategories.all.each do |i|
    x = i.sub_category_name
    y = i.id1
    z = i.name
    sql1 = @db + "'ALTER TABLE #{x} DROP INDEX #{y}'"
    sql2 = @db + "'ALTER TABLE #{x} ADD CONSTRAINT name_id UNIQUE (#{z},#{y})'"
    p "=================="
    p sql1
    system(sql1)
    
    p "------------------"
    p sql2
    system(sql2)
    p "=================="

    
  end   
#=================    
