# Get your project into GitHub
cd /your/project/directory
git init .
git add -A .
git commit -m "Initial import"
git remote add origin https://github.com/[user]/[repo].git
git push origin master
 
# After making some changes
git add -A .
git commit -m "application helper on server"
git push origin master
 
# Tag a release when you're ready
git tag v0.1.0
git push origin v0.1.0
 
# On your server, where you want to deploy the first time
cd /path/to/where/project/will/live
git clone https://github.com/[user]/[repo].git
git checkout v0.1.0
 
# On your server, when you want to deploy after that first time
cd /path/to/project/itself
git pull
git checkout v0.2.0

# From Senthils local machine

git add -A .
git commit -m "changed by senthil"

git fetch
git rebase origin/master
git status
(solve conflicts <<< ===== >>>>>)
(remove markers)

git add -A .
git rebase --continue

git commit -m "changed by senthil"

git push origin master


===Andrew====

have you committed your changes already?
if not, commit them. don't push them up yet though.
then run the following
yes i just committed
(after committing)
git fetch
git rebase origin/master
when you rebase, it's going to probably say that there are some conflicts. then if you run git status, you'll see (at the bottom) the files that have the conflicts
and then
?
8:51pm
so you'll want to open those files, find the areas that are in blocks that are delimited with <<<<<< characters, and fix the conflicts (if you need to take whatever he did, then just delete your piece, and vice versa, or pick the things out between the two to make it work)
once you've fixed the conflicts, type the following
git add -A .
git rebase --continue
then the rebase will continue going
if there are more conflicts in another commit, then you repeat all that until the rebase finishes
if there are conflicts in files that are mergeable (basically, on separate lines instead of you both making changes to the same line) git will automatically merge those for you
when it's on the same line, it isn't too sure which one of you it should trust. so you have to manually tell it what's right.


also, if you've made a whole bunch of changes (commits) and decide you want to go back to what the application looked like last week, you can roll everything back
and if you decide you want to ditch all of the changes you've made since your last commit, because maybe what you were working on just wasn't working and you want to get back to a fresh state, just run `git reset --hard HEAD`

the -A . basically says "add EVERYTHING that's changed to the package"
now, if you want to see what's change in your application since your last commit, you can run `git diff`
which will show you the diff of the old and new files. + before a line means that was added, - before a line means it was removed

if you want a better look at what a commit is, check your git log
run `git log`

if you want a better look at what a commit is check your git log now if you want to see 
